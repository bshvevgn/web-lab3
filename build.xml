<?xml version="1.0"?>
<project name="web3-290923-1800"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
>
    <property file="build.properties"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <path id="classpath.source">
        <fileset dir="src/main/lib" includes="**/*.jar"/>
    </path>
    <path id="classpath.testSource">
        <fileset dir="src/test/lib" includes="**/*.jar"/>
    </path>
    <target name="compile">
        <mkdir dir="${target.classes}"/>
        <javac destdir="${target.classes}"
               includeantruntime="false"
               srcdir="${main.source}"
               debug="on">
            <classpath refid="classpath.source"/>
        </javac>
    </target>
    <target name="compileTest">
        <mkdir dir="${target.tests}"/>
        <javac destdir="${target.tests}"
               includeantruntime="false"
               srcdir="${test.source}"
               debug="on">
            <classpath refid="classpath.testSource"/>
        </javac>
    </target>
    <target name="build" depends="compile">
        <jar destfile="${dist.jar}" basedir="${target.classes}"
             compress="false" index="true">
            <manifest>
                <attribute name="Main-Class"
                           value="io.github.web32909231800.Main"/>
            </manifest>
        </jar>
    </target>
    <target name="clean">
        <delete dir="${target}"/>
    </target>
    <target name="cleanAll" depends="clean">
        <delete dir="${target.team}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${doc.dir}"/>
    </target>
    <target name="test" depends="compileTest">
        <mkdir dir="${test.result.dir}"/>
        <junitlauncher printsummary="on" haltonfailure="yes">
            <classpath refid="classpath.testSource"/>
            <classpath>
                <pathelement location="${target.tests}"/>
            </classpath>
            <testclasses outputdir="${test.result.dir}">
                <fileset dir="${target.tests}">
                    <include name="**/*.class"/>
                </fileset>
                <listener type="legacy-xml" sendSysOut="true"
                          sendSysErr="true"/>
            </testclasses>
        </junitlauncher>
        <echo message="Test completed"/>
    </target>
    <target name="xml">
        <xmlvalidate failonerror="no" lenient="yes">
            <fileset dir="${project.dir}" includes="**/*.xml"/>
        </xmlvalidate>
    </target>
    <target name="music" depends="build">
        <exec executable="ffplay">
            <arg value="-v"/>
            <arg value="0"/>
            <arg value="-nodisp"/>
            <arg value="-autoexit"/>
            <arg
                    value="/Users/zerumi/IdeaProjects/web3-290923-1800/src/main/resources/a
udio.m4a"/>
        </exec>
    </target>
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" src="src/main/resources"
                      includes="*.properties" dest="${dist.dir}"/>
    </target>
    <target name="generate_key">
        <genkey alias="web3" storepass="webWeb" keystore="${keystore}"
                C="US"/>
    </target>
    keyalg="RSA"
    dname="CN=Ant Group, OU=Jakarta Division, O=Apache.org,
    <target name="doc" depends="build">
        <delete dir="${doc.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <javadoc destdir="${doc.dir}">
            <classpath refid="classpath.source"/>
            <classpath refid="classpath.testSource"/>
            <fileset dir="${source.dir}" includes="**/*.java"/>
        </javadoc>
        <jar destfile="${dist.jar}" update="true">
            <fileset dir="." includes="${doc.dir}/**"/>
        </jar>
        <signjar alias="web3"
                 storepass="webWeb"
                 keystore="${keystore}"
                 sigalg="MD5withRSA"
                 digestalg="SHA1">
            <path>
                <file file="${dist.jar}"/>
            </path>
        </signjar>
    </target>
    <target name="scp" depends="build">
        <sshexec
                host="${host}"
                port="${port}"
                username="${remote_user}"
                password="${remote_password}"
                command="mkdir -p ${remote_dir_path}"
                trust="true"/>
        <scp
                file="${dist.jar}"
                todir="${remote_user}@${host}:${remote_dir_path}"
                password="${remote_password}"
                port="${port}"/>
    </target>
    <target name="alt">
        <trycatch>
        </trycatch>
        <copy todir="${alt.source.dir}">
            <fileset dir="${source.dir}"/>
        </copy>
        <replace dir="${source.dir}">
            <include name="**/*.java"/>
            <include name="**/*.xml"/>
            <include name="**/*.xhtml"/>
            <include name="**/*.jsp"/>
            <replacefilter token="${alt.replace.from}"
                           value="${alt.replace.to}"/>
        </replace>
        value="${alt.replace.to}"/>
        <move todir="${source.dir}" includeemptydirs="false">
            <fileset dir="${source.dir}">
                <include name="**/*.java"/>
                <include name="**/*.xml"/>
                <include name="**/*.xhtml"/>
                <include name="**/*.jsp"/>
            </fileset>
            <regexpmapper from="(.*)${alt.replace.from}(.*)"
                          to="\1${alt.replace.to}\2"/>
        </move>
        <antcall target="clean"/>
        <antcall target="build"/>
        <delete dir="${source.dir}"/>
        <copy todir="${source.dir}">
            <fileset dir="${alt.source.dir}"/>
        </copy>
        <delete dir="${alt.source.dir}"/>
    </target>
    <target name="diff">
        <!-- <property name="vsc.git.diff_output" /> -->
        <exec executable="git" outputproperty="vcs.git.diff_output">
            <arg value="diff"/>
            <arg value="--name-only"/>
        </exec>
        <condition property="vcs.git.should_commit" value="true">
            <resourcecount count="0">
                <intersect>
                    <filelist id="vcs.git.files_to_commit"
                              files="${vcs.git.diff_output}"/>
                    <filelist files="${vcs.git.diff_files}"/>
                </intersect>
            </resourcecount>
        </condition>
        <echoproperties prefix="vcs"/>
        <!-- if set does not contain specified files, do commit -->
        <pathconvert property="vcs.git.files_to_commit_separated"
                     refid="vcs.git.files_to_commit" pathsep=" "/>
        <exec if:set="vcs.git.should_commit" executable="git">
            <arg value="add"/>
            <arg line="${vcs.git.files_to_commit_separated}"/>
        </exec>
        <exec if:set="vcs.git.should_commit" executable="git">
            <arg value="commit"/>
        </exec>
    </target>
    <target name="env" depends="build">
        <java jar="${dist.jar}" fork="true">
            <jvmarg line="${jvm.params}"/>
        </java>
    </target>
    <target name="team">
        <delete dir="${target.team}"/>
        <mkdir dir="${target.team}"/>
        <exec executable="svn">
            <arg line="update"/>
        </exec>
        <exec executable="svn" outputproperty="svn_revision">
            <arg line="info --show-item revision"/>
        </exec>
        <echo message="going down to the history... ${svn_revision}"/>
        <antcall target="clean"/>
        <antcall target="build"/>
        <move file="${dist.jar}" todir="${target.team}"/>
        <move file="${target.team}/${dist.jar.name}"
              tofile="${target.team}/1.jar"/>
        <math result="svn_revision">
            <op datatype="int" op="-">
                <num value="${svn_revision}"/>
                <num value="1"/>
            </op>
        </math>
        <echo message="going down to the history... ${svn_revision}"/>
        <exec executable="svn">
            <arg line="up -r ${svn_revision}"/>
        </exec>
        <antcall target="clean"/>
        <antcall target="build"/>
        <move file="${dist.jar}" todir="${target.team}"/>
        <move file="${target.team}/${dist.jar.name}"
              tofile="${target.team}/2.jar"/>
        <math result="svn_revision">
            <op datatype="int" op="-">
                <num value="${svn_revision}"/>
                <num value="1"/>
            </op>
        </math>
        <echo message="going down to the history... ${svn_revision}"/>
        <exec executable="svn">
            <arg line="up -r ${svn_revision}"/>
        </exec>
        <antcall target="clean"/>
        <antcall target="build"/>
        <move file="${dist.jar}" todir="${target.team}"/>
        <move file="${target.team}/${dist.jar.name}"
              tofile="${target.team}/3.jar"/>
        <zip destfile="${dist.dir}/jars.zip"
             basedir="${target.team}"/>
    </target>
    <target name="history">
        <exec executable="svn" outputproperty="svn_base_revision">
            <arg line="info --show-item revision"/>
        </exec>
        <trycatch>
            <try>
                <antcall target="compile"/>
                <exec executable="svn"
                      outputproperty="svn_current_revision">
                    <arg line="info --show-item revision"/>
                </exec>
                <echo message="run svn diff -r
${svn_current_revision}:${svn_base_revision}"/>
                <exec executable="svn">
                    <arg line="diff -r
${svn_current_revision}:${svn_base_revision}"/>
                </exec>
            </try>
            <catch>
                <exec executable="svn" outputproperty="svn_revision">
                    <arg line="info --show-item revision"/>
                </exec>
                <if>
                    <equals arg1="1" arg2="${svn_revision}"/>
                    <then>
                        <echo message="first revision reached /
                                abort"/>
                    </then>
                    <else>
                        <math result="svn_revision">
                            <op datatype="int" op="-">
                                <num value="${svn_revision}"/>
                                <num value="1"/>
                            </op>
                        </math>
                        <echo message="going down to the history...
                        ${svn_revision}"/>
                        <exec executable="svn">
                            <arg line="up -r ${svn_revision}"/>
                        </exec>
                        <runtarget target="history"/>
                    </else>
                    ${svn_revision}"/>
                </if>
            </catch>
        </trycatch>
    </target>
    <target name="report">
        <exec executable="svn">
            <arg line="add ${test.result.dir}"/>
        </exec>
        <trycatch>
            <try>
                <antcall target="test"/>
            </try>
            <catch>
                <echo message="Tests went wrong, report isn't
generated"/>
            </catch>
        </trycatch>
        <tstamp>
            <format property="timestamp" pattern="MM dd yyyy hh:mm
aa"/>
        </tstamp>
        <mkdir dir="${test.result.dir}/${timestamp}"/>
        <move todir="${test.result.dir}/${timestamp}">
            <fileset dir="${test.result.dir}">
                <include name="*.xml"/>
            </fileset>
        </move>
        <exec executable="svn">
            <arg line="add
&quot;${test.result.dir}/${timestamp}&quot;"/>
        </exec>
        <exec executable="svn">
            <arg line="commit -m &quot;Generate test report
${timestamp}&quot;"/>
        </exec>
        <exec executable="svn">
            <arg line="update"/>
        </exec>
    </target>
</project>